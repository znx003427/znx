








<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ShadowSec - Ethical Hacking</title>
    <style>
        :root {
            --blood-red: #8B0000;
            --dark-red: #5E0000;
            --black: #0A0A0A;
            --dark-gray: #1A1A1A;
            --light-gray: #333;
            --neon-red: #FF0000;
            --text: #E0E0E0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Courier New', monospace;
        }

        body {
            background-color: var(--black);
            color: var(--text);
            overflow-x: hidden;
            background-image: 
                radial-gradient(circle at 10% 20%, var(--dark-red), transparent 20%),
                radial-gradient(circle at 90% 80%, var(--dark-red), transparent 20%);
        }

        header {
            background-color: rgba(10, 10, 10, 0.8);
            padding: 1.5rem;
            border-bottom: 1px solid var(--blood-red);
            backdrop-filter: blur(5px);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .logo {
            color: var(--neon-red);
            font-size: 2rem;
            font-weight: bold;
            text-shadow: 0 0 10px var(--neon-red);
            letter-spacing: 3px;
        }

        .logo span {
            color: white;
            text-shadow: none;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: var(--text);
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s;
            position: relative;
        }

        .nav-links a:hover {
            color: var(--neon-red);
        }

        .nav-links a::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            bottom: -5px;
            left: 0;
            background-color: var(--neon-red);
            transition: width 0.3s;
        }

        .nav-links a:hover::after {
            width: 100%;
        }

        main {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1.5rem;
        }

        .hero {
            text-align: center;
            padding: 4rem 0;
            position: relative;
        }

        .hero h1 {
            font-size: 3.5rem;
            margin-bottom: 1rem;
            background: linear-gradient(to right, var(--text), var(--neon-red));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 0 15px rgba(139, 0, 0, 0.5);
        }

        .hero p {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto 2rem;
            line-height: 1.6;
        }

        .scanner-section {
            background-color: var(--dark-gray);
            border-radius: 10px;
            padding: 2rem;
            margin: 3rem 0;
            border: 1px solid var(--blood-red);
            box-shadow: 0 0 20px rgba(139, 0, 0, 0.3);
        }

        .scanner-section h2 {
            color: var(--neon-red);
            margin-bottom: 1.5rem;
            font-size: 2rem;
            text-align: center;
        }

        .scanner-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .input-group label {
            font-weight: bold;
            color: var(--neon-red);
        }

        .input-group input {
            background-color: var(--light-gray);
            border: 1px solid var(--blood-red);
            padding: 0.8rem;
            border-radius: 5px;
            color: white;
            font-size: 1rem;
            transition: all 0.3s;
        }

        .input-group input:focus {
            outline: none;
            border-color: var(--neon-red);
            box-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
        }

        .gojo-btn {
            background: linear-gradient(135deg, #3B3B98, #6A5ACD);
            color: white;
            border: none;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: bold;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin: 0 auto;
            width: fit-content;
            box-shadow: 0 5px 15px rgba(58, 58, 152, 0.4);
        }

        .gojo-btn::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to bottom right,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0) 30%,
                rgba(255, 255, 255, 0.8) 45%,
                rgba(255, 255, 255, 0) 60%,
                rgba(255, 255, 255, 0) 100%
            );
            transform: rotate(30deg);
            animation: shine 3s infinite;
        }

        .gojo-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(58, 58, 152, 0.6);
        }

        .gojo-btn:active {
            transform: translateY(1px);
        }

        @keyframes shine {
            0% {
                left: -50%;
                top: -50%;
            }
            100% {
                left: 150%;
                top: 150%;
            }
        }

        .results {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: var(--light-gray);
            border-radius: 5px;
            border-left: 5px solid var(--neon-red);
            display: none;
        }

        .results h3 {
            color: var(--neon-red);
            margin-bottom: 1rem;
        }

        .results p {
            line-height: 1.6;
        }

        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin: 4rem 0;
        }

        .feature-card {
            background-color: var(--dark-gray);
            border-radius: 10px;
            padding: 2rem;
            border: 1px solid var(--blood-red);
            transition: all 0.3s;
        }

        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(139, 0, 0, 0.3);
        }

        .feature-card h3 {
            color: var(--neon-red);
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .feature-card p {
            line-height: 1.6;
        }

        footer {
            background-color: var(--dark-gray);
            padding: 2rem;
            text-align: center;
            border-top: 1px solid var(--blood-red);
            margin-top: 4rem;
        }

        footer p {
            color: var(--text);
        }

        .terminal-effect {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.05;
        }

        .matrix-effect {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.1;
        }

        /* Responsividade */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2.5rem;
            }
            
            .nav-links {
                gap: 1rem;
            }
            
            .features {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="terminal-effect" id="terminalEffect"></div>
    <div class="matrix-effect" id="matrixEffect"></div>

    <header>
        <nav>
            <div class="logo">SHADOW<span>SEC</span></div>
            <div class="nav-links">
                <a href="#scanner">Scanner</a>
                <a href="#services">Serviços</a>
                <a href="#about">Sobre</a>
                <a href="#contact">Contato</a>
            </div>
        </nav>
    </header>

    <main>
        <section class="hero">
            <h1>HACKING ÉTICO PROFISSIONAL</h1>
            <p>Proteja seus sistemas antes que os invasores o façam. Nossas ferramentas avançadas de varredura identificam vulnerabilidades antes que se tornem brechas de segurança.</p>
            <a href="#scanner" class="gojo-btn">
                <span>Iniciar Scanner</span>
            </a>
        </section>

        <section class="scanner-section" id="scanner">
            <h2>SCANNER DE VULNERABILIDADES</h2>
            <form class="scanner-form" id="scannerForm">
                <div class="input-group">
                    <label for="email">Email / Usuário</label>
                    <input type="text" id="email" placeholder="alvo@exemplo.com" required>
                </div>
                <div class="input-group">
                    <label for="password">Senha (opcional)</label>
                    <input type="password" id="password" placeholder="********">
                </div>
                <div class="input-group">
                    <label for="target">URL Alvo</label>
                    <input type="url" id="target" placeholder="https://exemplo.com" required>
                </div>
                <button type="submit" class="gojo-btn">
                    <span>Executar Scanner</span>
                </button>
            </form>

            <div class="results" id="results">
                <h3>RESULTADOS DA ANÁLISE</h3>
                <div id="resultsContent">
                    <!-- Os resultados serão inseridos aqui via JavaScript -->
                </div>
            </div>
        </section>

        <section class="features" id="services">
            <div class="feature-card">
                <h3>Teste de Penetração</h3>
                <p>Simulação de ataques reais para identificar vulnerabilidades em seus sistemas antes que criminosos possam explorá-las.</p>
            </div>
            <div class="feature-card">
                <h3>Análise de Vulnerabilidades</h3>
                <p>Varredura profunda de sistemas, redes e aplicações para detectar falhas de segurança conhecidas e desconhecidas.</p>
            </div>
            <div class="feature-card">
                <h3>Treinamento em Segurança</h3>
                <p>Capacitação de equipes para reconhecer e prevenir ameaças cibernéticas, reduzindo riscos de ataques bem-sucedidos.</p>
            </div>
        </section>
    </main>

    <footer>
        <p>© 2023 ShadowSec - Ethical Hacking Services. Todos os direitos reservados.</p>
        <p>Este site é apenas para fins educacionais e de demonstração.</p>
    </footer>

    <script>
        // Efeito de terminal
        const terminalEffect = document.getElementById('terminalEffect');
        const chars = "01";
        const rows = 30;
        const cols = 100;

        let terminalContent = '';
        for (let i = 0; i < rows; i++) {
            let row = '';
            for (let j = 0; j < cols; j++) {
                row += chars[Math.floor(Math.random() * chars.length)];
            }
            terminalContent += row + '<br>';
        }
        terminalEffect.innerHTML = terminalContent;

        // Efeito Matrix
        const matrixEffect = document.getElementById('matrixEffect');
        const kanji = "田由甲申甴电甶男甸甹町画甼甽甾甿畀畁畂畃畄畅畆畇畈畉畊畋界畍畎畏畐畑";
        const canvas = document.createElement('canvas');
        matrixEffect.appendChild(canvas);
        
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        const fontSize = 16;
        const columns = canvas.width / fontSize;
        const drops = [];
        
        for (let i = 0; i < columns; i++) {
            drops[i] = 1;
        }
        
        function drawMatrix() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = '#0F0';
            ctx.font = fontSize + 'px monospace';
            
            for (let i = 0; i < drops.length; i++) {
                const text = kanji[Math.floor(Math.random() * kanji.length)];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                
                if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    drops[i] = 0;
                }
                
                drops[i]++;
            }
        }
        
        setInterval(drawMatrix, 33);

        // Scanner de vulnerabilidades
        const scannerForm = document.getElementById('scannerForm');
        const resultsDiv = document.getElementById('results');
        const resultsContent = document.getElementById('resultsContent');

        scannerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const target = document.getElementById('target').value;
            
            // Mostrar animação de carregamento
            resultsContent.innerHTML = '<p>Iniciando análise de vulnerabilidades...</p>';
            resultsDiv.style.display = 'block';
            
            // Simular tempo de análise
            setTimeout(() => {
                // Gerar resultados fictícios
                const vulnerabilities = [
                    "Injeção SQL detectada",
                    "Cross-Site Scripting (XSS) encontrado",
                    "Configuração insegura de CORS",
                    "Senha fraca detectada" + (password ? " (força: " + Math.floor(Math.random() * 30) + "/100)" : ""),
                    "Versão desatualizada do servidor web",
                    "Exposição de dados sensíveis"
                ];
                
                let resultHTML = `
                    <p><strong>Alvo:</strong> ${target}</p>
                    <p><strong>Credenciais testadas:</strong> ${email}${password ? ' / ' + '*'.repeat(password.length) : ''}</p>
                    <br>
                    <h4>VULNERABILIDADES ENCONTRADAS:</h4>
                    <ul>
                `;
                
                vulnerabilities.forEach(vuln => {
                    resultHTML += `<li>${vuln}</li>`;
                });
                
                resultHTML += `
                    </ul>
                    <br>
                    <p><strong>Nível de risco:</strong> <span style="color: var(--neon-red)">ALTO</span></p>
                    <p><strong>Recomendações:</strong></p>
                    <ol>
                        <li>Atualize todos os sistemas e dependências</li>
                        <li>Implemente validação de entrada rigorosa</li>
                        <li>Use prepared statements para consultas SQL</li>
                        <li>Configure políticas de CORS adequadas</li>
                        <li>Implemente autenticação de dois fatores</li>
                    </ol>
                    <br>
                    <p style="color: var(--neon-red); font-weight: bold;">
                        Este é um relatório simulado para fins educacionais. Scanner real requer autorização explícita do proprietário do sistema.
                    </p>
                `;
                
                resultsContent.innerHTML = resultHTML;
            }, 3000);
        });

        // Atualizar tamanho do canvas quando a janela for redimensionada
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    </script>
</body>
</html>












